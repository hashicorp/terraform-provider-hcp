// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

package providersdkv2

import (
	"context"
	"log"

	networkmodels "github.com/hashicorp/hcp-sdk-go/clients/cloud-network/stable/2020-09-07/models"
	sharedmodels "github.com/hashicorp/hcp-sdk-go/clients/cloud-shared/v1/models"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-hcp/internal/clients"
)

// PrivateLinkServiceResourceType is the resource type of a private link service
const PrivateLinkServiceResourceType = "hashicorp.network.private-link-service"

func dataSourcePrivateLinkService() *schema.Resource {
	return &schema.Resource{
		Description: "The private link service data source provides information about an existing private link service in an HVN.",
		ReadContext: dataSourcePrivateLinkServiceRead,
		Timeouts: &schema.ResourceTimeout{
			Default: &privateLinkDefaultTimeout,
		},
		Schema: map[string]*schema.Schema{
			// Required inputs
			"private_link_id": {
				Description: "The ID of the private link service.",
				Type:        schema.TypeString,
				Required:    true,
			},
			"hvn_id": {
				Description: "The ID of the HVN associated with the private link service.",
				Type:        schema.TypeString,
				Required:    true,
			},
			// Optional inputs
			"project_id": {
				Description: "The ID of the HCP project where the private link service is located. If not specified, the project configured in the provider is used.",
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
			},
			// Computed outputs
			"organization_id": {
				Description: "The ID of the HCP organization where the private link service is located.",
				Type:        schema.TypeString,
				Computed:    true,
			},
			"created_at": {
				Description: "The time that the private link service was created.",
				Type:        schema.TypeString,
				Computed:    true,
			},
			"updated_at": {
				Description: "The time that the private link service was last updated.",
				Type:        schema.TypeString,
				Computed:    true,
			},
			"state": {
				Description: "The state of the private link service.",
				Type:        schema.TypeString,
				Computed:    true,
			},
			"external_name": {
				Description: "The private link service name generated by the cloud provider. In AWS, this is the name of the VPC Endpoint Service.",
				Type:        schema.TypeString,
				Computed:    true,
			},
			"vault_cluster_id": {
				Description: "The ID of the HCP Vault cluster associated with the private link service.",
				Type:        schema.TypeString,
				Computed:    true,
			},
			"consumer_regions": {
				Description: "The cloud provider regions from which consumers can connect to the private link service.",
				Type:        schema.TypeList,
				Computed:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"consumer_accounts": {
				Description: "The list of consumer accounts allowed to connect to the private link service. In AWS, these are IAM Principals. In Azure, these are Azure Subscription/Resource IDs.",
				Type:        schema.TypeList,
				Computed:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"consumer_ip_ranges": {
				Description: "The list of consumer IP ranges or CIDRs allowed to connect to the HVD cluster associated with the private link service.",
				Type:        schema.TypeList,
				Computed:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"self_link": {
				Description: "A unique URL identifying the private link service.",
				Type:        schema.TypeString,
				Computed:    true,
			},
		},
	}
}

func dataSourcePrivateLinkServiceRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	client := meta.(*clients.Client)

	privateLinkID := d.Get("private_link_id").(string)
	hvnID := d.Get("hvn_id").(string)
	projectID, err := GetProjectID(d.Get("project_id").(string), client.Config.ProjectID)
	if err != nil {
		return diag.FromErr(err)
	}

	loc := &sharedmodels.HashicorpCloudLocationLocation{
		OrganizationID: client.Config.OrganizationID,
		ProjectID:      projectID,
	}

	log.Printf("[INFO] Reading private link service (%s) in HVN (%s)", privateLinkID, hvnID)
	privateLinkService, err := clients.GetPrivateLinkServiceByID(ctx, client, privateLinkID, hvnID, loc)
	if err != nil {
		return diag.Errorf("unable to retrieve private link service (%s): %v", privateLinkID, err)
	}

	// Private link service found, update resource data.
	if err := setPrivateLinkServiceResourceData(d, privateLinkService); err != nil {
		return diag.FromErr(err)
	}

	// Set the globally unique id of this private link service in the state.
	link := newLink(privateLinkService.Hvn.Location, PrivateLinkServiceResourceType, privateLinkService.ID)
	url, err := linkURL(link)
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(url)

	return nil

}

func setPrivateLinkServiceResourceData(d *schema.ResourceData, privateLinkService *networkmodels.HashicorpCloudNetwork20200907PrivateLinkService) error {
	if err := d.Set("private_link_id", privateLinkService.ID); err != nil {
		return err
	}

	if err := d.Set("hvn_id", privateLinkService.Hvn.ID); err != nil {
		return err
	}

	if err := d.Set("organization_id", privateLinkService.Hvn.Location.OrganizationID); err != nil {
		return err
	}

	if err := d.Set("project_id", privateLinkService.Hvn.Location.ProjectID); err != nil {
		return err
	}

	if err := d.Set("created_at", privateLinkService.CreatedAt.String()); err != nil {
		return err
	}

	if err := d.Set("updated_at", privateLinkService.UpdatedAt.String()); err != nil {
		return err
	}

	if err := d.Set("state", privateLinkService.State); err != nil {
		return err
	}

	if err := d.Set("external_name", privateLinkService.ExternalName); err != nil {
		return err
	}

	if err := d.Set("vault_cluster_id", privateLinkService.VaultClusterID); err != nil {
		return err
	}

	if err := d.Set("consumer_regions", privateLinkService.ConsumerRegions); err != nil {
		return err
	}

	if err := d.Set("consumer_accounts", privateLinkService.ConsumerAccounts); err != nil {
		return err
	}

	if err := d.Set("consumer_ip_ranges", privateLinkService.ConsumerIPRanges); err != nil {
		return err
	}

	link := newLink(privateLinkService.Hvn.Location, PrivateLinkServiceResourceType, privateLinkService.ID)
	selfLink, err := linkURL(link)
	if err != nil {
		return err
	}
	if err := d.Set("self_link", selfLink); err != nil {
		return err
	}

	return nil
}
