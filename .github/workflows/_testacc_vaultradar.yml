name: TestAcc Vault Radar

on:
  workflow_call:
  workflow_dispatch:
  pull_request:
    paths:
      - 'internal/clients/vault_radar.go'
      - 'internal/provider/vaultradar/**'

# This prevents more than one run of this workflow from executing at a time.
# Up to 1 additional run will be queued, with anything futher being cancelled from the queue.
concurrency:
  group: testacc-vaultradar
  cancel-in-progress: false

permissions:
  contents: write

jobs:
  acceptance_tests:
    name: Acceptance Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          token: ${{ secrets.HCP_SDK_PIPELINE_TOKEN }}
      - name: Set up Go
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          cache: true
          go-version-file: 'go.mod'
          cache-dependency-path: go.sum
        id: go
      - name: Install Dependencies
        env:
          GOPRIVATE: 'github.com/hashicorp/*'
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.53.3
          go mod tidy
      - name: Run 'go mod tidy'
        run: |
          make depscheck
      - name: Get dependencies
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.53.3
          go mod download
      - name: Go Build
        run: |
          go build -v .
      - name: Run TestAcc
        env:
          TF_ACC: 1

          HCP_API_HOST: ${{ secrets.HCP_API_HOST_INT }}
          HCP_AUTH_URL: ${{ secrets.HCP_AUTH_URL_INT }}

          HCP_ORGANIZATION_ID: ${{ secrets.VAULTRADAR_HCP_ORGANIZATION_ID }}
          HCP_PROJECT_ID: ${{ secrets.VAULTRADAR_HCP_PROJECT_ID }}
          HCP_CLIENT_ID: ${{ secrets.VAULTRADAR_HCP_CLIENT_ID }}
          HCP_CLIENT_SECRET: ${{ secrets.VAULTRADAR_HCP_CLIENT_SECRET }}

          # RADAR_INTEGRATION_JIRA_BASE_URL: ${{ secrets.RADAR_INTEGRATION_JIRA_BASE_URL }}
          # RADAR_INTEGRATION_JIRA_EMAIL: ${{ secrets.RADAR_INTEGRATION_JIRA_EMAIL }}
          # RADAR_INTEGRATION_JIRA_TOKEN: ${{ secrets.RADAR_INTEGRATION_JIRA_TOKEN }}
          # RADAR_INTEGRATION_JIRA_PROJECT_KEY: ${{ secrets.RADAR_INTEGRATION_JIRA_PROJECT_KEY }}
          # RADAR_INTEGRATION_JIRA_ISSUE_TYPE: ${{ secrets.RADAR_INTEGRATION_JIRA_ISSUE_TYPE }}
          # RADAR_INTEGRATION_JIRA_ASSIGNEE: ${{ secrets.RADAR_INTEGRATION_JIRA_ASSIGNEE }}
          # RADAR_INTEGRATION_SLACK_TOKEN: ${{ secrets.RADAR_INTEGRATION_SLACK_TOKEN }}
          # RADAR_INTEGRATION_SLACK_TOKEN_2: ${{ secrets.RADAR_INTEGRATION_SLACK_TOKEN_2 }}
          # RADAR_INTEGRATION_SLACK_CHANNEL: ${{ secrets.RADAR_INTEGRATION_SLACK_CHANNEL }}
          # RADAR_GITHUB_CLOUD_ORGANIZATION: ${{ secrets.RADAR_GITHUB_CLOUD_ORGANIZATION }}
          # RADAR_GITHUB_CLOUD_TOKEN: ${{ secrets.RADAR_GITHUB_CLOUD_TOKEN }}
          # RADAR_GITHUB_CLOUD_TOKEN_2: ${{ secrets.RADAR_GITHUB_CLOUD_TOKEN_2 }}
          # RADAR_GITHUB_ENTERPRISE_ORGANIZATION: ${{ secrets.RADAR_GITHUB_ENTERPRISE_ORGANIZATION }}
          # RADAR_GITHUB_ENTERPRISE_DOMAIN: ${{ secrets.RADAR_GITHUB_ENTERPRISE_DOMAIN }}
          # RADAR_GITHUB_ENTERPRISE_TOKEN: ${{ secrets.RADAR_GITHUB_ENTERPRISE_TOKEN }}
          # RADAR_GITHUB_ENTERPRISE_TOKEN_2: ${{ secrets.RADAR_GITHUB_ENTERPRISE_TOKEN_2 }}
        run: |
          go test \
            ./internal/provider/vaultradar \
            -v \
            -short \
            -test.v \
            -parallel=10 \
            -timeout=360m \
            -coverprofile=testacc-vaultradar.out

          go tool cover \
            -html=testacc-vaultradar.out \
            -o testacc-vaultradar.html
      - name: Upload TestAcc Coverage Artifact
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: coverage-vaultradar
          path: testacc-vaultradar.html
