name: TestAcc Packer

on:
  workflow_call:
  workflow_dispatch:
  pull_request:
    # Packer resources still use SDKv2 so we have to target files manually until fully migrated
    paths:
      # Plugin Framework
      - 'internal/provider/packer/**'
      # SDKv2
      - 'internal/clients/packerv2/**'
      - 'internal/providersdkv2/data_source_packer_*'
      - 'internal/providersdkv2/resource_packer_*'

# This prevents more than one run of this workflow from executing at a time.
# Up to 1 additional run will be queued, with anything futher being cancelled from the queue.
concurrency:
  group: testacc-packer
  cancel-in-progress: false

permissions:
  contents: write

jobs:
  acceptance_tests:
    name: Acceptance Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          token: ${{ secrets.HCP_SDK_PIPELINE_TOKEN }}
      - name: Set up Go
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          cache: true
          go-version-file: 'go.mod'
          cache-dependency-path: go.sum
        id: go
      - name: Install Dependencies
        env:
          GOPRIVATE: 'github.com/hashicorp/*'
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.53.3
          go mod tidy
      - name: Run 'go mod tidy'
        run: |
          make depscheck
      - name: Get dependencies
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.53.3
          go mod download
      - name: Go Build
        run: |
          go build -v .
      - name: Run TestAcc SDKv2
        env:
          TF_ACC: 1

          HCP_API_HOST: ${{ secrets.HCP_API_HOST_INT }}
          HCP_AUTH_URL: ${{ secrets.HCP_AUTH_URL_INT }}

          HCP_ORGANIZATION_ID: ${{ secrets.PACKER_HCP_ORGANIZATION_ID }}
          HCP_PROJECT_ID: ${{ secrets.PACKER_HCP_PROJECT_ID }}
          HCP_CLIENT_ID: ${{ secrets.PACKER_HCP_CLIENT_ID }}
          HCP_CLIENT_SECRET: ${{ secrets.PACKER_HCP_CLIENT_SECRET }}
        run: |
          go test ./internal/providersdkv2 \
            -v \
            -short \
            -test.v \
            -parallel=10 \
            -timeout=360m \
            -run=TestAcc_Packer.* \
            -coverprofile=testacc-packer.out

          go tool cover \
            -html=testacc-packer.out \
            -o testacc-packer.html
      # This runs synchronously because parallelism between packages causes failure
      - name: Run TestAcc Plugin Framework
        env:
          TF_ACC: 1

          HCP_API_HOST: ${{ secrets.HCP_API_HOST_INT }}
          HCP_AUTH_URL: ${{ secrets.HCP_AUTH_URL_INT }}

          HCP_ORGANIZATION_ID: ${{ secrets.PACKER_HCP_ORGANIZATION_ID }}
          HCP_PROJECT_ID: ${{ secrets.PACKER_HCP_PROJECT_ID }}
          HCP_CLIENT_ID: ${{ secrets.PACKER_HCP_CLIENT_ID }}
          HCP_CLIENT_SECRET: ${{ secrets.PACKER_HCP_CLIENT_SECRET }}
        run: |
          go test ./internal/provider/packer/... \
            -v \
            -short \
            -test.v \
            -parallel=10 \
            -timeout=360m \
            -run=TestAcc_Packer.*
      - name: Upload TestAcc Coverage Artifact
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: coverage-packer
          path: testacc-packer.html
