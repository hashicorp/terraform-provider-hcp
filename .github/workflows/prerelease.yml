name: Prerelease

on:
  # Run Every Wednesday at 12:00 AM UTC
  schedule:
    - cron: '0 0 * * 3'
  workflow_dispatch:

permissions: write-all

jobs:
  run-tests:
    name: Run Tests
    uses: ./.github/workflows/test.yml
    secrets: inherit
    permissions:
      contents: read

  prerelease:
    name: Prerelease
    needs: [run-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.HCP_SDK_PIPELINE_TOKEN }}

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          cache: true
          go-version-file: 'go.mod'
          cache-dependency-path: go.sum

      - name: Configure Git
        env:
          TOKEN: ${{ secrets.HCP_SDK_PIPELINE_TOKEN }}
        run: |
            git config --global advice.detachedHead false
            git config --global url."https://${TOKEN}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
            git config user.name "hashicorp-cloud"
            git config user.email "hashicorp-cloud@hashicorp.com"

      - name: Install Dependencies
        env:
          GOPRIVATE: 'github.com/hashicorp/*'
        run: |
          go install github.com/hashicorp/go-changelog/cmd/changelog-build@522d403eacf1dca87cacec6dbc37fdfcda262d26
          go mod tidy
      
      - name: Check For Changes
        id: changes
        run: |
          CURRENT_VERSION=$(git describe --tags `git rev-list --tags --max-count=1`)
          DIFF_CONTENT=$(git diff $CURRENT_VERSION main)
          if [[ $DIFF_CONTENT == "" ]]; then
            echo "There were no changes since the last release."
            echo "There were no changes since the last release." >> $GITHUB_STEP_SUMMARY
            echo "SHOULD_RELEASE=false" >> $GITHUB_OUTPUT
          else 
            echo "There were changes since the last release."
            echo "SHOULD_RELEASE=true" >> $GITHUB_OUTPUT
            echo "CURRENT_VERSION=$CURRENT_VERSION" >> "$GITHUB_ENV"
          fi

      - name: Prepare Release
        if: ${{ steps.changes.outputs.SHOULD_RELEASE == 'true' }}
        env:
          GOPRIVATE: 'github.com/hashicorp/*'
          GITHUB_TOKEN: ${{ secrets.HCP_SDK_PIPELINE_TOKEN }}
        run: |
          echo "Current Version: $CURRENT_VERSION"
          CURRENT_VERSION_PARTS=(${CURRENT_VERSION//./ })
          MAJOR=${CURRENT_VERSION_PARTS[0]}
          MINOR=${CURRENT_VERSION_PARTS[1]}
          PATCH=${CURRENT_VERSION_PARTS[2]}
          MINOR=$((MINOR+1))
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "New Version: ${NEW_VERSION}"
          echo "# Prerelease Summary" >> $GITHUB_STEP_SUMMARY
          echo "Updating ${CURRENT_VERSION} to ${NEW_VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "generating changelog"
          GIT_COMMIT_SHA=$(git rev-parse HEAD)
          CHANGELOG=$(changelog-build -changelog-template .changelog/changelog.tmpl -note-template .changelog/note.tmpl -entries-dir .changelog/ -last-release ${CURRENT_VERSION} -this-release ${GIT_COMMIT_SHA})
          echo "## Changelog" >> $GITHUB_STEP_SUMMARY
          echo -e "${CHANGELOG}" >> $GITHUB_STEP_SUMMARY
          DATE=$(date '+%B %d, %Y')
          mv CHANGELOG.md OLD-CHANGELOG.md
          echo -e "## ${NEW_VERSION} (${DATE})\n${CHANGELOG}" > CHANGELOG.md
          cat OLD-CHANGELOG.md >> CHANGELOG.md
          rm -f OLD-CHANGELOG.md
          git add CHANGELOG.md
          git commit -m 'updated CHANGELOG.md'
          echo "updating documentation"
          CURRENT_VERSION_NUM="${CURRENT_VERSION:1}"
          NEW_VERSION_NUM="${NEW_VERSION:1}"
          sed -i "s/~> $CURRENT_VERSION_NUM/~> $NEW_VERSION_NUM/g" examples/provider/provider.tf
          go generate
          git add examples/provider/provider.tf docs/index.md
          git commit -m 'updated documentation'
          echo "## Diff from Prerelease tasks" >> $GITHUB_STEP_SUMMARY
          echo "```diff" >> $GITHUB_STEP_SUMMARY
          echo -e "$(git diff origin/main..)" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          git diff origin/main..

      - name: Release New Version
        if: ${{ github.ref_name == 'main' && steps.changes.outputs.SHOULD_RELEASE == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.HCP_SDK_PIPELINE_TOKEN }}
        run: |
          echo "Pushing new tag to remote"
          git config -l
          git push --tags
          git push
